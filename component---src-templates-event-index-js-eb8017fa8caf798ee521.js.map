{"version":3,"sources":["webpack://mith-static/./src/components/paginator.js","webpack://mith-static/./src/templates/event-index.js"],"names":["count","path","className","Array","from","length","_","i","activeClassName","key","to","data","items","allEventsJson","nodes","pageCount","pageInfo","title","map","item","slug","id","event_title","talk_title","title_text","talk_subtitle","image","excerpt","fields","G","childImageSharp","gatsbyImageData","alt","eventsDescription","childMarkdownRemark","speakers_list","speakers_data","speakers","p","person","showTitle","type","status","types","types_list","t","itemId","replace","iconLocation","icon","location","details","start","end"],"mappings":"uIAyBA,IApBkB,SAAC,GAAmB,IAAlBA,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACzB,OACE,2BAASC,UAAU,mBACjB,sBAAIA,UAAU,cACXC,MAAMC,KAAK,CAAEC,OAAQL,IAAS,SAACM,EAAGC,GAAJ,OAC7B,sBAAIL,UAAU,aACZ,gBAAC,KAAD,CACEM,gBAAgB,SAChBN,UAAU,YACVO,IAAG,qBAAsBF,EAAI,GAC7BG,GAAE,IAAMT,EAAN,KAAoB,IAANM,EAAU,GAAKA,EAAI,IAClCA,EAAI,W,qICiJnB,UApJmB,SAAC,GAAY,IAAXI,EAAU,EAAVA,KACbC,EAAQD,EAAKE,cAAcC,MAC3BC,EAAYJ,EAAKE,cAAcG,SAASD,UAE9C,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKE,MAAM,gBACX,uBAAKf,UAAU,eACb,2BAASA,UAAU,gBACjB,sBAAIA,UAAU,cAAd,UACCU,EAAMM,KAAI,SAAAC,GAET,IAAMC,EAAO,WAAaD,EAAKE,GAAK,IAE9BC,EAAcH,EAAKG,YACnBC,EAAaJ,EAAKI,WAClBC,EAAaD,GAA0BD,EACvCL,EAAQE,EAAKM,cACf,sBAAIvB,UAAU,SAAQ,gBAAC,KAAD,CAAMQ,GAAIU,GAAOI,EAAW,wBAAMtB,UAAU,YAAYiB,EAAKM,iBACnF,sBAAIvB,UAAU,SAAQ,gBAAC,KAAD,CAAMQ,GAAIU,GAAOI,IAEvCE,EAAQ,GACRC,EAAU,GACVR,EAAKS,SACHT,EAAKS,OAAOF,QACdA,EAAQ,gBAAC,KAAD,CAAMhB,GAAIU,EAAMlB,UAAU,SAChC,gBAAC,EAAA2B,EAAD,CACEH,MAAOP,EAAKS,OAAOF,MAAMI,gBAAgBC,gBACzCC,IAAKb,EAAKF,MACVf,UAAU,kBAGZiB,EAAKS,OAAOK,oBACdN,EAAU,uBAAKzB,UAAU,WACtBiB,EAAKS,OAAOK,kBAAkBC,oBAAoBP,WAKzD,IAAIQ,EAAgB,KAEdC,EAAgBjB,EAAKkB,SAAWlB,EAAKkB,SAAW,GAClDlB,EAAKkB,WACPF,EAAgBC,EAAclB,KAAI,SAACoB,EAAG/B,GACpC,OAAO,gBAAC,IAAD,CAAQE,IAAG,IAAMF,EAAKgC,OAAQD,EAAGE,UAAU,QAAQC,KAAK,cAQnE,IAAMC,EAAyB,aAAhBvB,EAAKuB,OAAwB,wBAAMxC,UAAS,qBAAuBiB,EAAKuB,QAAWvB,EAAKuB,QAAiB,GACpHC,EAAQ,KACRC,EAAa,KACbzB,EAAKsB,OACPG,EAAazB,EAAKsB,KAAKvB,KAAI,SAAA2B,GACzB,OAAO,wBAAM3C,UAAU,kBAAkBO,IAAG,IAAMoC,GAAMA,MAG1DF,EAAQ,uBAAKzC,UAAU,eAAe0C,EAAYF,IAGpD,IAAMI,EAAS3B,EAAKE,GAAG0B,QAAQ,KAAM,KAC/BC,EAAe,gBAAC,IAAD,CAAiBC,KAAK,mBACrCC,EAAW/B,EAAK+B,SAClB,wBAAMhD,UAAU,YAAY8C,EAA5B,IAA2C7B,EAAK+B,UAAmB,GACjEC,EAAU,gBAAC,KAAD,CAAMjD,UAAU,SAASQ,GAAIU,GAA7B,iBAEhB,OACE,2BAASlB,UAAU,aAAaO,IAAG,SAAWU,EAAKE,GAAMA,GAAIyB,GAC1DpB,EACD,uBAAKxB,UAAU,WACZe,EACA0B,EACAhB,GAEH,uBAAKzB,UAAU,QACb,gBAAC,IAAD,CAAWkD,MAAOjC,EAAKiC,MAAOC,IAAKlC,EAAKkC,IAAKJ,KAAK,QACjDC,GAEH,uBAAKhD,UAAU,WACZiD,QAMX,gBAAC,IAAD,CAAWnD,MAAOe,EAAWd,KAAK","file":"component---src-templates-event-index-js-eb8017fa8caf798ee521.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nimport './paginator.css'\n\nconst Paginator = ({count, path}) => {\n  return(\n    <section className=\"pagination-wrap\">\n      <ul className=\"pagination\">\n        {Array.from({ length: count }, (_, i) => (\n          <li className=\"page-link\">\n            <Link\n              activeClassName=\"active\" \n              className=\"page-link\"\n              key={`pagination-number${i + 1}`}\n              to={`/${path}/${i === 0 ? \"\" : i + 1}`}>\n              {i + 1}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Paginator;","import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport Layout from '../components/layout'\nimport Paginator from '../components/paginator'\nimport SEO from '../components/seo'\nimport EventTime from '../components/event-time'\nimport Person from '../components/person'\n\nimport './event-index.css'\n\nconst EventIndex = ({data}) => {\n  const items = data.allEventsJson.nodes\n  const pageCount = data.allEventsJson.pageInfo.pageCount\n\n  return (\n    <Layout>\n      <SEO title=\"MITH Events\" />\n      <div className=\"page-events\">\n        <section className=\"posts events\">\n          <h1 className=\"page-title\">Events</h1>\n          {items.map(item => {\n\n            const slug = '/events/' + item.id + '/'\n            \n            const event_title = item.event_title\n            const talk_title = item.talk_title\n            const title_text = talk_title ? talk_title : event_title\n            const title = item.talk_subtitle\n              ? <h2 className=\"title\"><Link to={slug}>{title_text}<span className=\"subtitle\">{item.talk_subtitle}</span></Link></h2> \n              : <h2 className=\"title\"><Link to={slug}>{title_text}</Link></h2>\n\n            let image = ''\n            let excerpt = '' \n            if (item.fields) {\n              if (item.fields.image) {\n                image = <Link to={slug} className=\"image\">\n                  <GatsbyImage \n                    image={item.fields.image.childImageSharp.gatsbyImageData}\n                    alt={item.title} \n                    className=\"event-image\" \n                /></Link>\n              }\n              if (item.fields.eventsDescription) {\n                excerpt = <div className=\"excerpt\">\n                  {item.fields.eventsDescription.childMarkdownRemark.excerpt}\n                </div>\n              }\n            }\n          \n            let speakers_list = null\n            let speakers = null\n            const speakers_data = item.speakers ? item.speakers : []\n            if (item.speakers) {\n              speakers_list = speakers_data.map((p, i) => {\n                return <Person key={`p${i}`} person={p} showTitle=\"false\" type=\"index\" />\n              })\n              speakers = <div className=\"speakers hidden\">\n                <ul className=\"inline-list\">\n                  {speakers_list}\n                </ul>\n              </div>\n            }\n            const status = item.status === 'canceled' ? <span className={`pill event-status ${item.status}`}>{item.status}</span> : ''\n            let types = null\n            let types_list = null \n            if (item.type) {\n              types_list = item.type.map(t => {\n                return <span className=\"pill event-type\" key={`t${t}`}>{t}</span>\n              })\n              \n              types = <div className=\"event-types\">{types_list}{status}</div>\n            }\n\n            const itemId = item.id.replace(/-/g, '_')\n            const iconLocation = <FontAwesomeIcon icon=\"map-marker-alt\" />\n            const location = item.location \n              ? <span className=\"location\">{iconLocation} {item.location}</span> : ''\n            const details = <Link className=\"button\" to={slug}>Event Details</Link>\n\n            return (\n              <article className=\"event-item\" key={`event-${item.id}`} id={itemId}>\n                {image}\n                <div className=\"content\">\n                  {title}\n                  {types}\n                  {excerpt}\n                </div>\n                <div className=\"meta\">\n                  <EventTime start={item.start} end={item.end} icon=\"yes\" />\n                  {location}\n                </div>\n                <div className=\"details\">\n                  {details}\n                </div>\n              </article>\n            )\n          })}\n        </section>\n        <Paginator count={pageCount} path=\"events\" />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query EventsQuery($skip: Int!, $limit: Int!) {\n    allEventsJson (\n      limit: $limit\n      skip: $skip\n      sort: {\n        fields: [start_date], \n        order: [DESC]\n      }\n      filter: {\n        event_type: {ne: \"Digital Dialogue\"}\n      }\n    ) {\n      nodes {\n        id\n        event_title\n        talk_title\n        talk_subtitle\n        type: event_type\n        start: start_date\n        end: end_date\n        location\n        status\n        speakers {\n          name\n          affiliations {\n            title\n            department\n            institution\n          }\n          person_group\n          slug\n          new_id\n        }\n        fields {\n          eventsDescription {\n            childMarkdownRemark {\n                excerpt(pruneLength: 250)\n              }\n          }\n          image {\n            childImageSharp {\n              gatsbyImageData(width: 600, quality: 100, backgroundColor: \"rgba(255,255,255,0)\")\n            }\n          }\n        }\n      }\n      pageInfo {\n        pageCount\n      }\n    }\n  }\n`\n \nexport default EventIndex\n"],"sourceRoot":""}