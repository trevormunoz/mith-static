{"version":3,"sources":["webpack://mith-static/./src/pages/people-past.js"],"names":["data","title","className","people","group","filter","g","fieldValue","startsWith","sort","a","b","groups","nodes","group_name","map","id","toLowerCase","replace","person","identities","linked_identities","new_id","name","key","start","identity","end","makePerson"],"mappings":"sJAuFA,UAhFuB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAyBxB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,MAAM,gBACX,uBAAKC,UAAU,oBACb,2BAASA,UAAU,iBACjB,sBAAIA,UAAU,0BAAd,gBAGAF,EAAKG,OAAOC,MAAMC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,WAAWC,WAAW,WACrDC,MAAK,SAACC,EAAGC,GAAJ,OAAUX,EAAKY,OAAOC,MAAMR,QAAO,SAAAC,GAAC,OAAIA,EAAEQ,aAAeJ,EAAEH,cAAY,GAAGE,KAAOT,EAAKY,OAAOC,MAAMR,QAAO,SAAAC,GAAC,OAAIA,EAAEQ,aAAeH,EAAEJ,cAAY,GAAGE,QACtJM,KAAI,SAAAZ,GACH,OACE,2BAASa,GAAIb,EAAOI,WAAWU,cAAcC,QAAQ,IAAK,KAAMhB,UAAU,gBACxE,0BAAKC,EAAOI,YACXJ,EAAOU,MAAME,KAAI,SAAAI,GAChB,OAtChB,SAAoBA,GAClB,IAAIC,EAAaD,EAAOE,mBAAqB,GAC7C,OACA,2BAASnB,UAAU,SAASc,GAAIG,EAAOG,OAAQrB,MAAOkB,EAAOI,KAAMC,IAAG,KAAOL,EAAOG,QAClF,sBAAIpB,UAAU,QAAQiB,EAAOI,MAC7B,uBAAKrB,UAAU,WACZkB,EACAX,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEe,MAAQd,EAAEc,SAC3BV,KAAI,SAAAW,GACH,IAAMC,EAAMD,EAASD,QAAUC,EAASC,IAAM,GAAK,wBAAMzB,UAAU,OAAOwB,EAASC,KACnF,OAAQ,2BAASzB,UAAU,WAAWc,GAAIU,EAASV,GAAIQ,IAAG,KAAOE,EAASV,IACxE,wBAAMd,UAAU,SAASwB,EAASzB,OAClC,wBAAMC,UAAU,aACd,wBAAMA,UAAU,SAASwB,EAASD,OACjCE,SAwBUC,CAAWT","file":"component---src-pages-people-past-js-89d6c81709299956643f.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport './people.css'\n\nconst PeoplePastPage = ({ data }) => {\n  \n  function makePerson(person) {\n    let identities = person.linked_identities || []\n    return (\n    <article className=\"person\" id={person.new_id} title={person.name} key={`p-${person.new_id}`}>\n      <h3 className=\"name\">{person.name}</h3>\n      <div className=\"details\">\n        {identities\n        .sort((a, b) => a.start - b.start)\n        .map(identity => {\n          const end = identity.start === identity.end ? '' : <span className=\"end\">{identity.end}</span>\n          return (<article className=\"identity\" id={identity.id} key={`i-${identity.id}`}>\n            <span className=\"title\">{identity.title}</span>\n            <span className=\"date-span\">\n              <span className=\"start\">{identity.start}</span>\n              {end}\n            </span>   \n          </article>)\n        })}     \n      </div>\n    </article>\n    )    \n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Past People\" />\n      <div className=\"page-past-people\">\n        <section className=\"leader hidden\">\n          <h1 className=\"page-title text-hidden\">Past People</h1>\n        </section>\n        {\n          data.people.group.filter(g => g.fieldValue.startsWith('Past'))\n          .sort((a, b) => data.groups.nodes.filter(g => g.group_name === a.fieldValue)[0].sort - data.groups.nodes.filter(g => g.group_name === b.fieldValue)[0].sort)\n          .map(people => {\n            return (\n              <section id={people.fieldValue.toLowerCase().replace(' ', '_')} className=\"people-group\">\n                <h2>{people.fieldValue}</h2>\n                {people.nodes.map(person => {\n                  return makePerson(person)\n                })}\n              </section>\n            )\n          })\n        }\n      </div>\n    </Layout>\n  )\n}\nexport const query = graphql`\n  query PeoplePastQuery {\n    people: allPeopleJson(\n      filter: {group_type: {regex: \"/Past/\"}}\n      sort: {fields: [last]}\n    ) {\n      group(field: people_groups) {\n        fieldValue\n        nodes {\n          name\n          last\n          linked_identities {\n            title\n            start\n            end\n          }\n          id\n          new_id\n        }\n      }\n    }\n    groups: allGroupsJson {\n      nodes {\n        sort\n        group_name\n      }\n    }\n  }\n`\n \nexport default PeoplePastPage"],"sourceRoot":""}