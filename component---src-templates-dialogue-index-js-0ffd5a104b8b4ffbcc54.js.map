{"version":3,"sources":["webpack://mith-static/./src/components/paginator.js","webpack://mith-static/./src/templates/dialogue-index.js"],"names":["count","path","className","Array","from","length","_","i","activeClassName","key","to","data","pageContext","items","allEventsJson","nodes","pageCount","pageInfo","headshots","title","map","item","slug","id","event_title","talk_title","title_text","talk_subtitle","location","speakers_list","speakers","speakers_data","p","headshot","person","type","toLowerCase","replace","start"],"mappings":"uIAyBA,IApBkB,SAAC,GAAmB,IAAlBA,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACzB,OACE,2BAASC,UAAU,mBACjB,sBAAIA,UAAU,cACXC,MAAMC,KAAK,CAAEC,OAAQL,IAAS,SAACM,EAAGC,GAAJ,OAC7B,sBAAIL,UAAU,aACZ,gBAAC,KAAD,CACEM,gBAAgB,SAChBN,UAAU,YACVO,IAAG,qBAAsBF,EAAI,GAC7BG,GAAE,IAAMT,EAAN,KAAoB,IAANM,EAAU,GAAKA,EAAI,IAClCA,EAAI,W,iHC8FnB,UAnGsB,SAAC,GAAyB,IAAxBI,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,YACtBC,EAAQF,EAAKG,cAAcC,MAC3BC,EAAYL,EAAKG,cAAcG,SAASD,UACxCE,EAAYN,EAAYM,UAE9B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,MAAM,2BACX,uBAAKjB,UAAU,kBACb,2BAASA,UAAU,0BACjB,sBAAIA,UAAU,cAAd,qBACCW,EAAMO,KAAI,SAAAC,GAET,IAAMC,EAAO,sBAAwBD,EAAKE,GAAK,IAEzCC,EAAcH,EAAKG,YACnBC,EAAaJ,EAAKI,WAClBC,EAAaD,GAA0BD,EACvCL,EAAQE,EAAKM,cACjB,sBAAIzB,UAAU,SACZ,gBAAC,KAAD,CAAMQ,GAAIY,GAAOI,EAAW,wBAAMxB,UAAU,YAAYmB,EAAKM,iBAE/D,sBAAIzB,UAAU,SACZ,gBAAC,KAAD,CAAMQ,GAAIY,GAAOI,IAGfE,EAAWP,EAAKO,SAAW,uBAAK1B,UAAU,YAAYmB,EAAKO,UAAkB,GAE/EC,EAAgB,KAChBC,EAAW,KACTC,EAAgBV,EAAKS,SAAWT,EAAKS,SAAW,GAUtD,OATIT,EAAKS,SAASzB,OAAS,IACzBwB,EAAgBE,EAAcX,KAAI,SAACY,EAAGzB,GAGpC,OADAyB,EAAEC,SAAWf,EAAUc,EAAEV,MAClB,gBAAC,IAAD,CAAQb,IAAG,IAAMF,EAAK2B,OAAQF,EAAGG,KAAK,sBAE/CL,EAAW,uBAAK5B,UAAU,YAAY2B,IAItC,2BAAS3B,UAAU,sBAAsBqB,GAAIF,EAAKE,GAAGa,cAAcC,QAAQ,KAAM,KAAM5B,IAAG,YAAcY,EAAKE,IAC1GJ,EACD,uBAAKjB,UAAU,QACZ4B,EACAF,EACD,gBAAC,IAAD,CAAWU,MAAOjB,EAAKiB,cAOjC,gBAAC,IAAD,CAAWtC,MAAOgB,EAAWf,KAAK","file":"component---src-templates-dialogue-index-js-0ffd5a104b8b4ffbcc54.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nimport './paginator.css'\n\nconst Paginator = ({count, path}) => {\n  return(\n    <section className=\"pagination-wrap\">\n      <ul className=\"pagination\">\n        {Array.from({ length: count }, (_, i) => (\n          <li className=\"page-link\">\n            <Link\n              activeClassName=\"active\" \n              className=\"page-link\"\n              key={`pagination-number${i + 1}`}\n              to={`/${path}/${i === 0 ? \"\" : i + 1}`}>\n              {i + 1}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Paginator;","import React from 'react'\nimport { graphql, Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Paginator from '../components/paginator'\nimport SEO from '../components/seo'\nimport EventTime from '../components/event-time'\nimport Person from '../components/person'\n\nimport './event-index.css'\n\nconst DialogueIndex = ({data, pageContext}) => {\n  const items = data.allEventsJson.nodes\n  const pageCount = data.allEventsJson.pageInfo.pageCount\n  const headshots = pageContext.headshots\n\n  return (\n    <Layout>\n      <SEO title=\"MITH Digital Dialogues\" />\n      <div className=\"page-dialogues\">\n        <section className=\"posts dialogues events\">\n          <h1 className=\"page-title\">Digital Dialogues</h1>\n          {items.map(item => {\n\n            const slug = '/digital-dialogues/' + item.id + '/'\n            \n            const event_title = item.event_title\n            const talk_title = item.talk_title\n            const title_text = talk_title ? talk_title : event_title\n            const title = item.talk_subtitle\n            ? <h2 className=\"title\">\n                <Link to={slug}>{title_text}<span className=\"subtitle\">{item.talk_subtitle}</span></Link>\n              </h2>\n            : <h2 className=\"title\">\n                <Link to={slug}>{title_text}</Link>\n              </h2>\n\n            const location = item.location ? <div className=\"location\">{item.location}</div> : ''\n          \n            let speakers_list = null\n            let speakers = null\n            const speakers_data = item.speakers ? item.speakers : []\n            if (item.speakers.length > 0) {\n              speakers_list = speakers_data.map((p, i) => {\n                // find headshot                \n                p.headshot = headshots[p.slug]\n                return <Person key={`p${i}`} person={p} type=\"dialogue-index\" />\n              })\n              speakers = <div className=\"speakers\">{speakers_list}</div>\n            }\n\n            return (\n              <article className=\"post dialogue event\" id={item.id.toLowerCase().replace(/-/g, '_')} key={`dialogue-${item.id}`}>\n                {title}\n                <div className=\"meta\">\n                  {speakers}\n                  {location}\n                  <EventTime start={item.start} />\n                </div>\n              </article>\n            )\n\n          })}\n        </section>\n        <Paginator count={pageCount} path=\"digital-dialogues\" />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query DialoguesQuery($skip: Int!, $limit: Int!) {\n    allEventsJson (\n      limit: $limit\n      skip: $skip\n      filter: {\n        event_type: {eq: \"Digital Dialogue\"}\n      }\n      sort: {\n        fields: [start_date], order: [DESC]\n      }\n    ) {\n      nodes {\n        id\n        event_title\n        talk_title\n        talk_subtitle\n        type: event_type\n        start: start_date\n        end: end_date\n        location\n        speakers {\n          name\n          affiliations {\n            title\n            department\n            institution\n          }\n          person_group\n          slug\n          new_id\n        }\n      }\n      pageInfo {\n        pageCount\n      }\n    }\n  }\n`\n \nexport default DialogueIndex\n"],"sourceRoot":""}